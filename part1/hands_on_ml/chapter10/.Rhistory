per_clf$fit(as.array(as.matrix(X)), as.vector(y))
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
per_clf = Perceptron()
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
y_pred = per_clf$predict([[2, 0.5]])
y_pred = per_clf$predict([2, 0.5])
y_pred = per_clf$predict(array(2, 0.5))
y_pred = per_clf$predict(matrix(c(2, 0.5), ncol=2)
)
y_pred
per_clf$coef_
per_clf$coef_[[1]]
per_clf$coef_[[1]]
per_clf$coef_
per_clf = Perceptron(random_state=42)
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
per_clf = Perceptron(np$random_state=42)
np$random$get_state(42)
np$random$RandomState(42)
np$random$RandomState(seed=42)
np$random$RandomState$seed(42)
np$random$RandomState(42)
set.seed(24)
set.seed(42)
per_clf = Perceptron()
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
y_pred = per_clf$predict(matrix(c(2, 0.5), ncol=2))
y_pred
per_clf$coef_
per_clf
per_clf = Perceptron(random_state=42)
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
per_clf = Perceptron(random_state=42.0)
per_clf = Perceptron(random_state=42.0)
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
per_clf = Perceptron(random_state=int(42))
per_clf = Perceptron(random_state=as.integer(42))
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
per_clf
y_pred = per_clf$predict(matrix(c(2, 0.5), ncol=2))
y_pred
per_clf$coef_
per_clf
as.array(as.vector(y)
)
head(iris)
X = iris[,c(3:4)]
y = ifelse(as.numeric(iris$Species) == 1, 1, 0)
per_clf = Perceptron(random_state=as.integer(42))
as.array(as.vector(y)
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
per_clf$fit(as.array(as.matrix(X)),
as.array(as.vector(y)))
per_clf
y_pred = per_clf$predict(matrix(c(2, 0.5), ncol=2))
y_pred
per_clf$coef_
per_clf$coef_[0,1]
per_clf$coef_[1]
per_clf$coef_[2]
b = -per_clf$intercept_ / per_clf.coef_[2]
a = -per_clf$coef_[1] / per_clf$coef_[2]
b = -per_clf$intercept_ / per_clf$coef_[2]
a
b
axes = c(0, 5, 0, 2)
np$meshgrid(np$linspace(axes[1], axes[2], 500), reshape=c(-1,1))
np$meshgrid(np$linspace(axes[1], axes[2], 500))
np$meshgrid(np$linspace(axes[1], axes[2], 500)$reshape)
np$meshgrid(np$linspace(axes[1], axes[2], 500, reshape=c(-1,1))
reshape=c(-1,1))
np$meshgrid(np$linspace(axes[1], axes[2], 500, reshape=c(-1,1))
)
x1 = np$meshgrid(np$linspace(axes[3], axes[4], 200)
x0 = np$meshgrid(np$linspace(axes[1], axes[2], 500))
x1 = np$meshgrid(np$linspace(axes[3], axes[4], 200))
x0
x1x0
dim(x0)
x0
x1
x_new = np$c_(x0$ravel(), x1$ravel())
plot(x0,x1)
type(x0)
str(x0)
str(x1)
datasets <- tf$contrib$learn$datasets
mnist <- datasets$mnist$read_data_sets("MNIST-data", one_hot = TRUE)
X_train = mnist$train$images
X_test = mnist$test$images
y_train = mnist$train$labels$astype("int")
y_train = as.integer(mnist$train$labels_
y_train = as.integer(mnist$train$labels)
y_test = as.integer(mnist$test$labels)
dim(X_train)
dim(X_test)
config = tf$contrib$learn$RunConfig(tf_random_seed=42) # not shown in the config
config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
config = tf$contrib$learn$RunConfig(tf_random_seed=42, dtype = 'float32') # not shown in the config
config = tf$contrib$learn$RunConfig(tf_random_seed=42) # not shown in the config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train, dtype = 'float32')
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train, dtype = 'float64')
X_train
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100),
n_classes=10,
feature_columns=feature_cols,
config=config)
feature_cols
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100)
n_classes=10,
feature_columns=feature_cols,
config=config)
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100)
n_classes=10,
feature_columns=feature_cols,
config=config)
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100)
n_classes=10,
feature_columns=feature_cols,
config=config)
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100),
n_classes=10,
feature_columns=feature_cols,
config=config)
dnn_clf
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42)) # not shown in the config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100),
n_classes=10,
feature_columns=feature_cols,
config=config
)
dnn_clf = tf$contrib$learn$SKCompat(dnn_clf)
dnn_clf$fit(X_train, y_train, batch_size=50, steps = 40000)
feature_cols
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train, dtype='float32')
X_test = mnist$test$images(dtype='float32')
X_train
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42), dtype='float32') # not shown in the config
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42)) # not shown in the config
config
feature_cols
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train, dtype = 'float32')
tf$cast(feature_cols, tf$float32)
feature_cols = tf$float32$contrib$learn$infer_real_valued_columns_from_input(X_train, dtype = 'float32')
feature_cols = tf$float32$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)$float32
feature_cols
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(np$float32(X_train))
feature_cols
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(np$float64(X_train))
feature_cols
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100),
n_classes=10,
feature_columns=feature_cols,
config=config, dtype='float64')
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100),
n_classes=10,
feature_columns=feature_cols,
config=config)
dnn_clf
dnn_clf = tf$contrib$learn$SKCompat(dnn_clf)
dnn_clf
dnn_clf$fit(X_train, y_train, batch_size=50, steps = 40000, type='float64')
dnn_clf$fit(X_train, y_train, batch_size=50, steps = 40000)
feature_cols
feature_cols = tf$cast(tf$contrib$learn$infer_real_valued_columns_from_input(X_train), type='float32')
feature_cols = tf$cast(tf$contrib$learn$infer_real_valued_columns_from_input(X_train), dtype='float32')
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
tf$cast(feature_cols, dtype='float32')
feature_cols
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42), target_dtype=np.int) # not shown in the config
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42)) # not shown in the config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train, features_dtype=np.float32)
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train, features_dtype=np$float32)
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(np$float32(X_train))
feature_cols
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(tf$float32(X_train))
head(X_train)
str(X_train)
tf$cast(X_train)
tf$cast(X_train, dtype='float32')
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(tf$cast(X_train, dtype='float32'))
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input_fn(tf$cast(X_train, dtype='float32'))
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input_fn(X_train, dtype='float32')
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input_fn(X_train)
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
feature_cols[[1]]
tf$cast(feature_cols[[1]], dtype='float32')
type(feature_cols)
type(feature_cols[[1]])
class(feature_cols[[1]])
type(feature_cols[[1]])
feature_cols[[1]]
feature_cols = tf$contrib$layers$real_valued_column(X_train)
feature_cols
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100),
n_classes=10,
feature_columns=feature_cols,
config=config)
dnn_clf
dnn_clf = tf$contrib$learn$SKCompat(dnn_clf)
dnn_clf$fit(X_train, y_train, batch_size=50, steps = 40000)
feature_cols
feature_cols
dnn_clf
dnn_clf$fit(X_train, y_train, batch_size=50, steps = 40000)
feature_cols
feature_cols = tf$contrib$layers$real_valued_column(default_valu=X_train, dimension=784L)
feature_cols = tf$contrib$layers$real_valued_column(default_value=X_train, dimension=784)
feature_cols = tf$contrib$layers$real_valued_column(X_train, dimension=784)
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
dnn_clf = tf$contrib$learn$DNNClassifier(hidden_units=c(300,100),
n_classes=10,
feature_columns=feature_cols,
config=config)
dnn_clf
dnn_clf = tf$contrib$learn$SKCompat(dnn_clf)
dnn_clf
dnn_clf$fit(X_train, y_train, batch_size=50, steps = 40000)
str(X_train)
np$float32(X_train)
X_train <- np$float32(X_train)
X_test <- np$float32(X_test))
X_test <- np$float32(X_test)
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42)) # not shown in the config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
X_train
str(X_train)
X_train <- as.matrix(X_train)
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42)) # not shown in the config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
X_train <- np$float32(as.matrix(X_train))
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42)) # not shown in the config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
X_train = mnist$train$images
np$dtype(X_train)
training_set <- tf$contrib$learn$datasets$base$load_csv_with_header(
filename = "iris_training.csv",
target_dtype = np$int,
features_dtype = np$float32
)
X_train = mnist$train$images
X_test = mnist$test$images
y_train = as.integer(mnist$train$labels)
y_test = as.integer(mnist$test$labels)
np$dtype(X_train)
X_train
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42)) # not shown in the config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(np$float32(X_train))
feature_cols
np$ndarray$astype(X_train)
np$ndarray$astype(X_train, dtype='float64')
np$ndarray$astype(X_train, dtype='float32')
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
X_train <- np$ndarray$astype(X_train, dtype='float32')
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train)
feature_cols
X_train2 <- np$araay(X_train, dtype='float32')
X_train2 <- np$array(X_train, dtype='float32')
X_train2
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train2)
feature_cols
X_train2$dtype
X_train2$astype('float32')
x = np.array([1, 2, 2.5])
x = np.array(c(1, 2, 2.5)
)
x = np$array(c(1, 2, 2.5))
x
x$astype(int)
X_train = mnist$train$images
X_test = mnist$test$images
y_train = as.integer(mnist$train$labels)
y_test = as.integer(mnist$test$labels)
config = tf$contrib$learn$RunConfig(tf_random_seed=as.integer(42)) # not shown in the config
feature_cols = tf$contrib$learn$infer_real_valued_columns_from_input(X_train2)
n_inputs = 28*28  # MNIST
n_hidden1 = 300
n_hidden2 = 100
n_outputs = 10
tf$reset_default_graph()
X = tf$placeholder(tf$float32, shape=c(NULL, n_inputs), name="X")
y = tf$placeholder(tf$int64, shape=NULL, name="y")
y = tf$placeholder(tf$int64, shape=c(NULL), name="y")
y = tf$placeholder(tf$int64, shape=NULL, name="y")
X = tf$placeholder(tf$float32, shape(NULL, n_inputs), name="X")
y = tf$placeholder(tf$int64, shape(NULL), name="y")
X
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = X$get_shape()[1]
stddev = 2 / sqrt(n_inputs)
init = tf$truncated_normal((n_inputs, n_neurons), stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL), activation(Z), Z)
})
}
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = X$get_shape()[0]
stddev = 2 / sqrt(n_inputs)
init = tf$truncated_normal(c(n_inputs, n_neurons), stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL), activation(Z), Z)
})
}
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
X$get_shape()
X$get_shape()[0]
X$get_shape()[[0]]
X$get_shape()[[1]]
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = X$get_shape()[[1]]
stddev = 2 / sqrt(n_inputs)
init = tf$truncated_normal(c(n_inputs, n_neurons), stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL), activation(Z), Z)
})
}
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
X$get_shape()[[1]]
sqrt(X$get_shape()[[1]])
np$sqrt(X$get_shape()[[1]])
?sqrt
X$get_shape()[[1]]
sqrt(X$get_shape()[[1]])
sqrt(as.integer(X$get_shape()[[1]]))
sqrt(as.integer(X$get_shape()[[1]]))
np$sqrt(as.integer(X$get_shape()[[1]]))
np$sqrt(X$get_shape()[[1]])
X$get_shape()[[1]]
X$get_shape()[[1]][1]
X$get_shape()[1]
X$get_shape()[[1]]
log(X$get_shape()[[1]])
sqrt(X$get_shape()[[1]])
sqrt(X$get_shape()[[1]])
sqrt(X$get_shape()[[1]],2)
?sqrt
sqrt(4)
sqrt(X$get_shape()[[1]])
X$get_shape()[[1]]
784
c(X$get_shape()[[1]])
sqrt(as.vector(X$get_shape()[[1]]))
X$get_shape()
as.vector(X$get_shape())
as.integer(X$get_shape())
class(X$get_shape())
X$get_shape[[1]]
X$get_shape()[[1]]
as.integer(X$get_shape()[[1]]_
as.integer(X$get_shape()[[1]])
X$get_shape()[[1]]
np$sqrt(X$get_shape()[[1]])
np$sqrt(X$get_shape()[[1]])
np$sqrt(X$get_shape())
np$sqrt(X$get_shape()[[0]])
sqrt(784)
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = X$get_shape()[[1]]
stddev = 2 / 28 #sqrt(n_inputs)
init = tf$truncated_normal(c(n_inputs, n_neurons), stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL), activation(Z), Z)
})
}
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = X$get_shape()[[1]]
stddev = 2 / 28 #sqrt(n_inputs)
init = tf$truncated_normal(n_inputs, n_neurons, stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL), activation(Z), Z)
})
}
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = X$get_shape()[[1]]
stddev = 2 / 28 #sqrt(n_inputs)
init = tf$truncated_normal(shape(n_inputs, n_neurons), stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL), activation(Z), Z)
})
}
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = 794 #X$get_shape()[[1]]
stddev = 2 / 28 #sqrt(n_inputs)
init = tf$truncated_normal(shape(n_inputs, n_neurons), stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL), activation(Z), Z)
})
}
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = 784 #X$get_shape()[[1]]
stddev = 2 / 28 #sqrt(n_inputs)
init = tf$truncated_normal(shape(n_inputs, n_neurons), stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL), activation(Z), Z)
})
}
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
neuron_layer <- function(X, n_neurons, name, activation=NULL){
with(tf$name_scope('name') %as% scope, {
n_inputs = 784 #X$get_shape()[[1]]
stddev = 2 / 28 #sqrt(n_inputs)
init = tf$truncated_normal(shape(n_inputs, n_neurons), stddev=stddev)
W = tf$Variable(init, name="kernel")
b = tf$Variable(tf$zeros(n_neurons), name="bias")
Z = tf$matmul(X, W) + b
return(ifelse(activation != NULL, activation(Z), Z))
})
}
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
ls()
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
with(tf$name_scope('dnn') %as% scope, {
hidden1 = neuron_layer(X, n_hidden1, name="hidden1", activation=tf$nn$relu)
hidden2 = neuron_layer(hidden1, n_hidden2, name="hidden2", activation=tf$nn$relu)
logits = neuron_layer(hidden2, n_outputs, name="outputs")
})
